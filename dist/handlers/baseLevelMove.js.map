{"version":3,"sources":["../../src/handlers/baseLevelMove.tsx"],"names":["handlerPropsValidation","baseLevelMove","e","step","handlerProps","baseLevel","currentEl","target","baseEl","closest","currentLevel","parseInt","dataset","level","currentIdx","tabIndex","parentEl","currentTarget","tabbables","querySelectorAll","l","length","nextIdx","nextElement","focus"],"mappings":"AACA,OAAOA,sBAAP,MAAmC,0BAAnC;AAEA,eAAe,SAASC,aAAT,CACbC,CADa,EAEbC,IAFa,EAGbC,YAHa,EAIb;AACAJ,EAAAA,sBAAsB,CAACE,CAAD,EAAIE,YAAJ,CAAtB;AACA,QAAMC,SAAiB,GAAG,CAA1B;AACA,QAAMC,SAAoB,GAAGJ,CAAC,CAACK,MAA/B;AACA,QAAMC,MAAM,GAAGF,SAAS,CAACG,OAAV,CAAmB,gBAAeJ,SAAU,IAA5C,CAAf;AACA,MAAIK,YAAoB,GAAGC,QAAQ,CAACL,SAAS,CAACM,OAAV,CAAkBC,KAAnB,CAAnC;AACA,MAAIC,UAAJ;;AACA,MAAIJ,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvBA,IAAAA,YAAY,GAAG,CAAf;AACAI,IAAAA,UAAU,GAAG,CAAC,CAAd;AACD,GAHD,MAGO;AACLA,IAAAA,UAAU,GAAGN,MAAM,CAACO,QAApB;AACD;;AACD,QAAMC,QAAmB,GAAGd,CAAC,CAACe,aAA9B;AAEA,QAAMC,SAAS,GAAGF,QAAQ,CAACG,gBAAT,CAA2B,4BAA3B,CAAlB;AAEA,QAAMC,CAAC,GAAGF,SAAS,CAACG,MAApB;AACA,MAAIC,OAAO,GAAGR,UAAd;;AACA,MAAIA,UAAU,GAAGX,IAAb,GAAoBiB,CAAC,GAAG,CAA5B,EAA+B;AAC7BE,IAAAA,OAAO,GAAG,CAAV;AACD,GAFD,MAEO,IAAIR,UAAU,GAAGX,IAAb,GAAoB,CAAxB,EAA2B;AAChCmB,IAAAA,OAAO,GAAGF,CAAC,GAAG,CAAd;AACD,GAFM,MAEA;AACLE,IAAAA,OAAO,GAAGR,UAAU,GAAGX,IAAvB;AACD;;AACD,QAAMoB,WAAW,GAAGL,SAAS,CAACI,OAAD,CAA7B;;AACA,MAAIC,WAAJ,EAAiB;AACfA,IAAAA,WAAW,CAACC,KAAZ;AACD,GA7BD,CA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD","sourcesContent":["import { WithLevel, HandlerProps } from \".\";\r\nimport handlerPropsValidation from \"./handlerPropsValidation\"\r\n\r\nexport default function baseLevelMove(\r\n  e: any,\r\n  step: -1 | 1,\r\n  handlerProps: HandlerProps\r\n) {\r\n  handlerPropsValidation(e, handlerProps)\r\n  const baseLevel: number = 0;\r\n  const currentEl: WithLevel = e.target;\r\n  const baseEl = currentEl.closest(`[data-level=\"${baseLevel}\"]`) as WithLevel;\r\n  let currentLevel: number = parseInt(currentEl.dataset.level);\r\n  let currentIdx: number;\r\n  if (currentLevel === -1) {\r\n    currentLevel = 0;\r\n    currentIdx = -1;\r\n  } else {\r\n    currentIdx = baseEl.tabIndex;\r\n  }\r\n  const parentEl: WithLevel = e.currentTarget;\r\n\r\n  const tabbables = parentEl.querySelectorAll(`[data-level=\"0\"][tabIndex]`);\r\n\r\n  const l = tabbables.length;\r\n  let nextIdx = currentIdx;\r\n  if (currentIdx + step > l - 1) {\r\n    nextIdx = 0;\r\n  } else if (currentIdx + step < 0) {\r\n    nextIdx = l - 1;\r\n  } else {\r\n    nextIdx = currentIdx + step;\r\n  }\r\n  const nextElement = tabbables[nextIdx] as WithLevel;\r\n  if (nextElement) {\r\n    nextElement.focus();\r\n  }\r\n  // // focus first child - doesnt work well\r\n  // const firstArr = Array.from(nextElement.children) as HTMLElement[];\r\n  // const first = firstArr.find((el: HTMLElement) => {\r\n  //   if (el.dataset && el.dataset.level) {\r\n  //     return parseInt(el.dataset.level) === currentLevel + 1;\r\n  //   }\r\n  // }) as WithLevel;\r\n  // if (first) first.focus();\r\n}\r\n"],"file":"baseLevelMove.js"}